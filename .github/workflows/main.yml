name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout code
    - uses: actions/checkout@v2
    
    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        
    # Step 3: Cache Maven packages
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    # Step 4: Build and Test Microservices
    - name: Build and Test
      run: |
        for service in ApiGateway OrderService ProductService UserService; do
          cd $service && ./mvnw clean package && cd ..
        done
    
    # Step 5: Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    # Step 6: Build and Push Docker images
    - name: Build and Push Docker Images
      run: |
        for service in ApiGateway OrderService ProductService UserService; do
          image_name="your-dockerhub-username/${service,,}:${{ github.sha }}"
          docker build -t $image_name ./$service
          docker push $image_name
        done

  deploy-azure:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout code
    - uses: actions/checkout@v2
    
    # Step 2: Login to Azure
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    # Step 3: Login to Azure Container Registry (ACR)
    - name: Azure Container Registry Login
      run: |
        az acr login --name ${{ secrets.AZURE_CONTAINER_REGISTRY }}
        
    # Step 4: Deploy to Azure Container Instances
    - name: Deploy Microservices to Azure
      run: |
        for service in ApiGateway OrderService ProductService UserService; do
          dns_label="${service,,}-${{ github.sha }}"
          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${service,,} \
            --image your-dockerhub-username/${service,,}:${{ github.sha }} \
            --ports 8080 \
            --dns-name-label $dns_label
        done
